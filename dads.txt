import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from math import pi

# Load and preprocess data
df = pd.read_csv('/kaggle/input/customer-personality-analysis/marketing_campaign.csv', sep='\t')
df.dropna(inplace=True)

df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'], dayfirst=True)
df['Age'] = 2025 - df['Year_Birth']
df.drop(columns=['Year_Birth'], inplace=True)

df['Tenure'] = (pd.to_datetime('2025-01-01') - df['Dt_Customer']).dt.days
df.drop(columns=['Dt_Customer'], inplace=True)

df['Family_Size'] = df['Kidhome'] + df['Teenhome']
df.drop(columns=['Kidhome', 'Teenhome'], inplace=True)

df['Total_Campaigns_Accepted'] = df[['AcceptedCmp1','AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5']].sum(axis=1)
df.drop(columns=['AcceptedCmp1','AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5'], inplace=True)

df['Monetary'] = df[['MntWines','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds']].sum(axis=1)
df['Frequency'] = df[['NumWebPurchases','NumCatalogPurchases','NumStorePurchases']].sum(axis=1)

# Feature selection for clustering
features = ['Recency', 'Frequency', 'Monetary', 'Age', 'Tenure', 'Family_Size', 'NumDealsPurchases', 'NumWebVisitsMonth']
X = df[features]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine optimal clusters using Elbow and Silhouette methods
sse = []
silhouette = []
K_range = range(2, 10)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    sse.append(kmeans.inertia_)
    silhouette.append(silhouette_score(X_scaled, kmeans.labels_))

# Plot Elbow and Silhouette side-by-side
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(K_range, sse, marker='o')
plt.title('Elbow Method - SSE')
plt.xlabel('Number of clusters')
plt.ylabel('SSE')

plt.subplot(1,2,2)
plt.plot(K_range, silhouette, marker='o', color='green')
plt.title('Silhouette Score')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')

plt.tight_layout()
plt.show()

# Choose k=4 clusters (example) and assign segments
k = 4
kmeans = KMeans(n_clusters=k, random_state=42)
df['Segment'] = kmeans.fit_predict(X_scaled)

# Plot customer count per segment
plt.figure(figsize=(6,4))
sns.countplot(x='Segment', data=df, palette='Set2')
plt.title('Customer Count per Segment')
plt.show()

# Print segment profile means
segment_profile = df.groupby('Segment')[features + ['Income', 'Total_Campaigns_Accepted']].mean().round(2)
print(segment_profile)

# PCA for visualization
pca = PCA(n_components=2)
components = pca.fit_transform(X_scaled)
df['PCA1'] = components[:,0]
df['PCA2'] = components[:,1]

plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='Segment', palette='Set2')
plt.title('Customer Segments (PCA View)')
plt.show()

# Radar chart for segment profiles (normalized)
features_radar = ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'Frequency', 'Recency']
df_grouped = df.groupby('Segment')[features_radar].mean()

df_normalized = df_grouped.copy()
for col in df_grouped.columns:
    df_normalized[col] = (df_grouped[col] - df_grouped[col].min()) / (df_grouped[col].max() - df_grouped[col].min())

labels = df_normalized.columns.tolist()
num_vars = len(labels)
angles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(6,6), subplot_kw=dict(polar=True))
colors = ['b', 'r', 'g', 'm']
for i, row in df_normalized.iterrows():
    values = row.tolist()
    values += values[:1]
    ax.plot(angles, values, label=f'Segment {i}', color=colors[i])
    ax.fill(angles, values, alpha=0.1, color=colors[i])

ax.set_xticks(angles[:-1])
ax.set_xticklabels(labels)
plt.title('Segment Profiles (Radar Chart)')
plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
plt.show()

# Pairplot for selected features colored by segment
sns.pairplot(df, hue='Segment', vars=['Monetary', 'Frequency', 'Recency', 'Age'], palette='Set2')
plt.show()

# Additional Income visualizations
plt.figure(figsize=(15,4))

plt.subplot(1,3,1)
sns.countplot(x='Segment', data=df, palette='Set2')
plt.title("Customer Count per Segment")

plt.subplot(1,3,2)
sns.barplot(x='Segment', y='Income', data=df, estimator='mean', palette='Set2')
plt.title("Average Income per Segment")

plt.subplot(1,3,3)
sns.boxplot(x='Segment', y='Income', data=df, palette='Set2')
plt.title('Income Distribution per Segment')

plt.tight_layout()
plt.show()

# Save segmented dataframe
df.to_csv("segmented_customers.csv", index=False)


